from django.db import models
from django.contrib.auth.models import User 

"""
    Model for Hubs. This will create a Hubs table in our DB and with columns for
        1) id - auto generated by django so you wont see it here.
        2) name - the name of the hub. 50 chars max for name, hub names must be unique
        3) description - description of the hub set during creation.
        4) owner - the creator of the hub. right now it's set to delete a hub when the owner acc is deleted
                   but i plan on making it fall back on a default user account. like a rebel hub admin or something
                   the related name is owned hubs which describes the users relationship with this field.
        5) mods - moderators of a hub. moderators can be added and removed from a hub by the owner. 
        6) members - Many to Many relationship between the hubs and all it's users. starts blank. 
                     related name is joined hubs which describes the users relationship with this field.
        7) pending_members - Many to Many relationship between the hubs and all users who have requested join.
                             this field should only only be populated if a hub is private
        7) created_at - timestamp for when a hub is created. we can use this to order quereys and also to display
                        more details about a hub on the frontend. automatically gets set to current time when hub
                        is created.
        8) private_hub - hub is private if true. hub is public if false.
    Method overrides:
        save - we override the save function in which first we call the super method that does the normal save.
               then, if the owner is not a member in the hub we add them.
        str - printing a hub will display Hub: ... followed by the hub name.
"""
class Hub(models.Model):
    name = models.CharField(max_length=50, unique=True)
    description = models.TextField()
    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name='owned_hubs')
    mods = models.ManyToManyField(User, related_name='moderating_hubs', blank=True)
    members = models.ManyToManyField(User, related_name='joined_hubs', blank=True)
    pending_members = models.ManyToManyField(User, related_name='requested_hubs', blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    private_hub = models.BooleanField(default=False)
    tags = models.ManyToManyField('Tags.Hub_Tag', related_name='tagged_hubs', blank=True)
    bg = models.ImageField(upload_to="hub_backgrounds/", null=True, blank=True)
    banner = models.ImageField(upload_to="hub_banners/", null=True, blank=True)

    
    def save(self, *args, **kwargs):
        super(Hub, self).save(*args, **kwargs)
        if self.owner not in self.members.all():
            self.members.add(self.owner)

    def __str__(self):
        return "Hub: " + self.name

